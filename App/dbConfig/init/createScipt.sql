
-- Table: public.Stats

DROP TABLE IF EXISTS public."Stats";

CREATE TABLE IF NOT EXISTS public."Stats"
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 2 MINVALUE 2 MAXVALUE 2147483647 CACHE 1 ),
    wins integer NOT NULL DEFAULT 0,
    losses integer NOT NULL DEFAULT 0,
    eloscore integer NOT NULL DEFAULT 100,
    CONSTRAINT "Stats_pkey" PRIMARY KEY (id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Stats"
    OWNER to admin;


-- Table: public.User

DROP TABLE IF EXISTS public."User";

CREATE TABLE IF NOT EXISTS public."User"
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 23412 MINVALUE 23412 MAXVALUE 2147483647 CACHE 1 ),
    username text COLLATE pg_catalog."default" NOT NULL,
    password text COLLATE pg_catalog."default" NOT NULL,
    salt text COLLATE pg_catalog."default" NOT NULL,
    "admin" boolean NOT NULL DEFAULT 'false',
    coins integer NOT NULL DEFAULT 20,
    "statsID" integer NOT NULL,
    CONSTRAINT "User_pkey" PRIMARY KEY (id),
    CONSTRAINT stats FOREIGN KEY ("statsID")
        REFERENCES public."Stats" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."User"
    OWNER to admin;


-- Table: public.UserToken

DROP TABLE IF EXISTS public."UserToken";

CREATE TABLE IF NOT EXISTS public."UserToken"
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 MAXVALUE 2147483647 CACHE 1 ),
    "userID" integer NOT NULL,
    "authToken" text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "UserToken_pkey" PRIMARY KEY (id),
    CONSTRAINT "user" FOREIGN KEY ("userID")
        REFERENCES public."User" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."UserToken"
    OWNER to admin;


-- Table: public.Card

DROP TABLE IF EXISTS public."Card";

CREATE TABLE IF NOT EXISTS public."Card"
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "userID" integer NOT NULL,
    "cardType" integer NOT NULL,
    "name" text COLLATE pg_catalog."default" NOT NULL,
    "damage" integer NOT NULL,
    "elementType" integer NOT NULL,
    "monsterType" integer,
    "isDeck" boolean NOT NULL DEFAULT 'false',
    CONSTRAINT "Card_pkey" PRIMARY KEY (id),
    CONSTRAINT "userID" FOREIGN KEY ("userID")
        REFERENCES public."User" (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public."Card"
    OWNER to admin;

-- Table: Achievements

DROP TABLE IF EXISTS public."Achievement";

CREATE TABLE IF NOT EXISTS public."Achievement" 
(
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 MAXVALUE 2147483647 CACHE 1 ),
    name text,
	"type" text NULL,
	value integer NULL,
    "rewardtype" text NULL,
    "rewardvalue" integer NULL,
	CONSTRAINT achievement_pk PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public."Achievement"
    OWNER to admin;

INSERT INTO public."Achievement" (id, name, "type", value, rewardtype, rewardvalue) VALUES(1, '10 total wins', 'wins', '10', 'coins', '5');
INSERT INTO public."Achievement" (id, name, "type", value, rewardtype, rewardvalue) VALUES(2, '25 total wins', 'wins', '25', 'coins', '10');
INSERT INTO public."Achievement" (id, name, "type", value, rewardtype, rewardvalue) VALUES(3, '50 total wins', 'wins', '50', 'elo', '10');
INSERT INTO public."Achievement" (id, name, "type", value, rewardtype, rewardvalue) VALUES(4, 'eloscore of 150', 'elo', '150', 'elo', '5');
INSERT INTO public."Achievement" (id, name, "type", value, rewardtype, rewardvalue) VALUES(5, 'eloscore of 190', 'elo', '190', 'coins', '10');
INSERT INTO public."Achievement" (id, name, "type", value, rewardtype, rewardvalue) VALUES(6, 'eloscore of 230', 'elo', '230', 'elo', '5');
INSERT INTO public."Achievement" (id, name, "type", value, rewardtype, rewardvalue) VALUES(7, 'eloscore of 300', 'elo', '300', 'coins', '10');

-- Table: UserAchievements

DROP TABLE IF EXISTS public."UserAchievement";

CREATE TABLE IF NOT EXISTS public."UserAchievement" 
(
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 MAXVALUE 2147483647 CACHE 1 ),
	"user" integer NOT NULL,
	achievement integer NOT NULL,
	CONSTRAINT userachievement_pk PRIMARY KEY (id),
	CONSTRAINT userachievement_user_fk FOREIGN KEY ("user") REFERENCES public."User"(id) ON DELETE CASCADE,
	CONSTRAINT userachievement_achievement_fk FOREIGN KEY (achievement) REFERENCES public."Achievement"(id) ON DELETE CASCADE
);

ALTER TABLE IF EXISTS public."UserAchievement"
    OWNER to admin;


-- Table: Trade

DROP TABLE IF EXISTS public."Trade";

CREATE TABLE IF NOT EXISTS public."Trade" (
	id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 0 MINVALUE 0 MAXVALUE 2147483647 CACHE 1 ),
	"offeredCard" integer NOT NULL,
	requirements text NULL,
	"userID" integer NULL,
	CONSTRAINT trade_pk PRIMARY KEY (id),
    CONSTRAINT trade_userid_fk FOREIGN KEY ("userID") REFERENCES public."User"(id) ON DELETE CASCADE,
    CONSTRAINT trade_offeredcard_fk FOREIGN KEY ("offeredCard") REFERENCES public."Card"(id),
);

ALTER TABLE IF EXISTS public."Trade"
    OWNER to admin;

-- Table: TradeRequest

DROP TABLE IF EXISTS public."TradeRequest";

CREATE TABLE IF NOT EXISTS public."TradeRequest" (
	id integer GENERATED ALWAYS AS IDENTITY NOT NULL,
	"offeredCard" integer NULL,
	"tradeID" integer NULL,
	"requestUserID" integer NULL,
	CONSTRAINT traderequest_pk PRIMARY KEY (id),
    CONSTRAINT traderequest_userid_fk FOREIGN KEY ("requestedUserID") REFERENCES public."User"(id) ON DELETE CASCADE,
    CONSTRAINT traderequest_offeredcard_fk FOREIGN KEY ("offeredCard") REFERENCES public."Card"(id),
    CONSTRAINT traderequest_tradeid_fk FOREIGN KEY ("tradeID") REFERENCES public."Trade"(id) ON DELETE CASCADE,
);

ALTER TABLE IF EXISTS public."TradeRequest"
    OWNER to admin;



INSERT INTO public."Stats"(
    id, wins, losses, eloscore)
	VALUES (1, 5, 0, 140);

INSERT INTO public."User"(
	username, password, salt, "admin", "statsID")
	VALUES ('admin', 'CpVEZX8rtUe0EYCaRWTvo03KmBImPOmS0EPHuv9Xzig=', 'wmj/wpwM9AzXCeb9Jn9R8Q==', true, 1);